diff --git a/main.v b/main.v
index e63c96b..9465d1c 100644
--- a/main.v
+++ b/main.v
@@ -7,6 +7,17 @@
 
 module main (
     input  wire clk_i,
+    output wire scl, // I2C Gyroscope sensor
+`ifdef SYNTHESIS             
+    inout  wire sda, // I2C Gyroscope sensor
+`else
+    input  wire sda, // I2C Gyroscope sensor
+`endif             
+    output wire motor_stby, // motor driver
+    output wire motor_ain1, // motor driver
+    output wire motor_ain2, // motor driver
+    output wire motor_pwma, // motor driver
+    input  wire [1:0] button, //button
     output wire st7789_SDA,
     output wire st7789_SCL,
     output wire st7789_DC,
@@ -37,10 +48,44 @@ module main (
     wire [`DBUS_DATA_WIDTH-1:0] dbus_wdata;
     wire [`DBUS_STRB_WIDTH-1:0] dbus_wstrb;
     wire [`DBUS_DATA_WIDTH-1:0] dbus_rdata;
+    reg [31:0] r_dmem_addr = 0;
+
+    wire [31:0] r_dmem_addr_w = r_dmem_addr;
+    
+    always@(posedge clk) begin 
+        r_dmem_addr <= dmem_addr;
+    end
+
+    wire [31:0] w_mmio_data;
+    mmio_control mmio(
+        .clk_i          (clk),             
+        .rst_i          (rst),
+        .button_i       (button),
+        .r_dmem_addr_i  (r_dmem_addr_w),
+        .dbus_we_i      (dbus_we),
+        .dbus_addr_i    (dbus_addr),
+        .dbus_wdata_i   (dbus_wdata),
+        .w_mmio_data_o  (w_mmio_data),
+        .scl_io         (scl),
+        .sda_io         (sda)
+    );
+
+    wire pwm_we = (dbus_addr==32'h3000_0040 & dbus_we);
+    wire [31:0] pwm_ctrl = dbus_wdata;
+    tb6612fng tb6612fng (
+        .clk_i              (clk            ), 
+        .we_i               (pwm_we         ), 
+        .ctrl_i             (pwm_ctrl       ), 
+        .stby_o             (motor_stby     ), 
+        .in1_o              (motor_ain1     ), 
+        .in2_o              (motor_ain2     ), 
+        .pwm_o              (motor_pwma     )    
+    );
 
+    
     reg                         rdata_sel = 0;
     always @(posedge clk) rdata_sel <= dbus_addr[30];
-    assign dbus_rdata = (rdata_sel) ? perf_rdata : dmem_rdata;
+    assign dbus_rdata = (rdata_sel) ? perf_rdata : (r_dmem_addr[31:28]==4'h3) ? w_mmio_data: dmem_rdata;
 
     cpu cpu (
         .clk_i        (clk),         // input  wire
@@ -60,7 +105,7 @@ module main (
         .rdata_o(imem_rdata)   // output reg  [DATA_WIDTH-1:0]
     );
 
-    wire dmem_we = dbus_we & (dbus_addr[28]);
+    wire dmem_we = dbus_we & (dbus_addr[28]) & !(dbus_addr[29]);
     wire [31:0] dmem_addr = dbus_addr;
     wire [31:0] dmem_wdata = dbus_wdata;
     wire [3:0] dmem_wstrb = dbus_wstrb;
